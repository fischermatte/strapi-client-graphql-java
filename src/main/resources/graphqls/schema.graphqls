# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union GenericMorph = EmailTemplate | I18NLocale

type EmailTemplate {
    createdAt: DateTime
    email_type: ENUM_EMAILTEMPLATE_EMAIL_TYPE
    locale: String
    localizations(filters: EmailTemplateFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EmailTemplateRelationResponseCollection
    message: String
    publishedAt: DateTime
    subject: String
    updatedAt: DateTime
}

type EmailTemplateEntity {
    attributes: EmailTemplate
    id: ID
}

type EmailTemplateEntityResponse {
    data: EmailTemplateEntity
}

type EmailTemplateEntityResponseCollection {
    data: [EmailTemplateEntity!]!
    meta: ResponseCollectionMeta!
}

type EmailTemplateRelationResponseCollection {
    data: [EmailTemplateEntity!]!
}

type I18NLocale {
    code: String
    createdAt: DateTime
    name: String
    updatedAt: DateTime
}

type I18NLocaleEntity {
    attributes: I18NLocale
    id: ID
}

type I18NLocaleEntityResponse {
    data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
    data: [I18NLocaleEntity!]!
    meta: ResponseCollectionMeta!
}

type Mutation {
    createEmailTemplate(data: EmailTemplateInput!, locale: I18NLocaleCode): EmailTemplateEntityResponse
    createEmailTemplateLocalization(data: EmailTemplateInput, id: ID, locale: I18NLocaleCode): EmailTemplateEntityResponse
    deleteEmailTemplate(id: ID!, locale: I18NLocaleCode): EmailTemplateEntityResponse
    updateEmailTemplate(data: EmailTemplateInput!, id: ID!, locale: I18NLocaleCode): EmailTemplateEntityResponse
}

type Pagination {
    page: Int!
    pageCount: Int!
    pageSize: Int!
    total: Int!
}

type Query {
    emailTemplate(id: ID, locale: I18NLocaleCode): EmailTemplateEntityResponse
    emailTemplates(filters: EmailTemplateFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EmailTemplateEntityResponseCollection
    i18NLocale(id: ID): I18NLocaleEntityResponse
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
}

type ResponseCollectionMeta {
    pagination: Pagination!
}

enum ENUM_EMAILTEMPLATE_EMAIL_TYPE {
    SCREENING_PARA_BUCHUNG
    SCREENING_PILOT_BUCHUNG
}

enum PublicationState {
    LIVE
    PREVIEW
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A string used to identify an i18n locale"
scalar I18NLocaleCode

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input DateTimeFilterInput {
    and: [DateTime]
    between: [DateTime]
    contains: DateTime
    containsi: DateTime
    endsWith: DateTime
    eq: DateTime
    eqi: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    ne: DateTime
    not: DateTimeFilterInput
    notContains: DateTime
    notContainsi: DateTime
    notIn: [DateTime]
    notNull: Boolean
    or: [DateTime]
    startsWith: DateTime
}

input EmailTemplateFiltersInput {
    and: [EmailTemplateFiltersInput]
    createdAt: DateTimeFilterInput
    email_type: StringFilterInput
    id: IDFilterInput
    locale: StringFilterInput
    localizations: EmailTemplateFiltersInput
    message: StringFilterInput
    not: EmailTemplateFiltersInput
    or: [EmailTemplateFiltersInput]
    publishedAt: DateTimeFilterInput
    subject: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input EmailTemplateInput {
    email_type: ENUM_EMAILTEMPLATE_EMAIL_TYPE
    message: String
    publishedAt: DateTime
    subject: String
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FloatFilterInput {
    and: [Float]
    between: [Float]
    contains: Float
    containsi: Float
    endsWith: Float
    eq: Float
    eqi: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    not: FloatFilterInput
    notContains: Float
    notContainsi: Float
    notIn: [Float]
    notNull: Boolean
    or: [Float]
    startsWith: Float
}

input I18NLocaleFiltersInput {
    and: [I18NLocaleFiltersInput]
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: I18NLocaleFiltersInput
    or: [I18NLocaleFiltersInput]
    updatedAt: DateTimeFilterInput
}

input IDFilterInput {
    and: [ID]
    between: [ID]
    contains: ID
    containsi: ID
    endsWith: ID
    eq: ID
    eqi: ID
    gt: ID
    gte: ID
    in: [ID]
    lt: ID
    lte: ID
    ne: ID
    not: IDFilterInput
    notContains: ID
    notContainsi: ID
    notIn: [ID]
    notNull: Boolean
    or: [ID]
    startsWith: ID
}

input IntFilterInput {
    and: [Int]
    between: [Int]
    contains: Int
    containsi: Int
    endsWith: Int
    eq: Int
    eqi: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    not: IntFilterInput
    notContains: Int
    notContainsi: Int
    notIn: [Int]
    notNull: Boolean
    or: [Int]
    startsWith: Int
}

input JSONFilterInput {
    and: [JSON]
    between: [JSON]
    contains: JSON
    containsi: JSON
    endsWith: JSON
    eq: JSON
    eqi: JSON
    gt: JSON
    gte: JSON
    in: [JSON]
    lt: JSON
    lte: JSON
    ne: JSON
    not: JSONFilterInput
    notContains: JSON
    notContainsi: JSON
    notIn: [JSON]
    notNull: Boolean
    or: [JSON]
    startsWith: JSON
}

input PaginationArg {
    limit: Int
    page: Int
    pageSize: Int
    start: Int
}

input StringFilterInput {
    and: [String]
    between: [String]
    contains: String
    containsi: String
    endsWith: String
    eq: String
    eqi: String
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    not: StringFilterInput
    notContains: String
    notContainsi: String
    notIn: [String]
    notNull: Boolean
    or: [String]
    startsWith: String
}
